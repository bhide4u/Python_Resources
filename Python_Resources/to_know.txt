commenting - 
single line, multi line

variables - 

variable declaration rules - 
1. Descriptive names, easy to read
2. Avoid reserved keywords as variable names
3. Use lowercase letters, separate words by underscore, snake_case
4. Declare variables close to where they are used.
5. Define constants in all capital letters
6. Don't reuse variables in same block of code
7. Avoid using global variables unless absolutely necessary
8. use variable type annotations eg. - num_students: int = 20

Special variables / Magic variables
1. _ Used as a placeholder for variables that are not used in the code
2. __ Used for name mangling in Python classes (Name mangling is a technique that makes a variable or method private to a class)
3. __init__  Double underscore on both sides - Used for special methods or attributes in Python

Variable assignments - 

1. Multiple values to multiple variables
a, b, c = 1, 2, 3

2. One value to multiple variables
a = b = c = "apple"

Unpacking collection - 
a, b, c = [1, 2, 3]

Variable Scoping - 
1. Global 
- defined outside of any function or class definition
- can be accessed from anywhere in your code
- to modify a global variable from within a function, you need to use the global keyword (not recommended)

2. Local 
- Defined within a function or class definition
- they can only be accessed from within that function or class


Data structure vs Data Type - 

Data Type - 
- A data type is a classification of data that determines the type of operations that can be performed on it
- integers, floats, strings, and booleans
- Each data type has its own set of operations that can be performed on it

Data Structures -
- a way of organizing and storing data in a computer so that it can be accessed and used efficiently
- builtin data structures - lists, tuples, dictionaries, and sets
- Each data structure has its own set of methods and operations that can be performed on it
- eg -  append() method on lists , keys() method on dictionaries

Data types in Python - 

1. Numeric Types - int, float, complex
2. Text Type - str
3. Sequence Types - list, tuple, range
4. Mapping Type - dict
5. Set Types - set, frozenset
6. Boolean Type - bool
7. Binary Types - bytes, bytearray, memoryview
8. None Type - None

Specialized Data types in Python - 
1. lists
- collection of items that can be of any data type
- ordered
- mutable
- created using square brackets [ ] and commas (,) are used to separate values

- List indexing starts from 0
- List slicing - List[ start : end : step ]
- start - the index of the first character to include, 
- end - the index of the last character to include (exclusive)
- step - is the step size (default is 1)

- Matrix
- multi dimensional lists
- can access individual elements of a multi-dimensional list using two indices - matrix[1][2]

- list methods - append, copy [shallow copying], clear, count, extend, index, insert, pop, remove, reverse, sort

- list unpacking
- a, b, *c = [1, 2, 3, 4, 5]
- can be used to swap variables
    a = 1
    b = 2
    a, b = b, a

2. strings
- '' or ""
- display using print()
- Multiline Strings - ''' or """
- strings are arrays
- square brackets to access elements of string [] (first character has index 0)
- string concatenation - + 
- formatted strings - f"{}" , {pi:.2f}, "{}".format() , can specify {:.2f} in .format()

- String indexing starts from 0
- String slicing - string[ start : end : step ]
- start - the index of the first character to include, 
- end - the index of the last character to include (exclusive)
- step - is the step size (default is 1)

- Strings are immutable

- String methods 
- capitalize, count, endswith, find, index, join, lower, lstrip, replace, rstrip, split, startswith, strip title , upper

3. Booleans
- True, False
- Used in conditional statements to represent logical values

4. None
- represents the absence of a value
- used to indicate that a variable or function argument does not have a meaningful value
- function call has no return value
- used as the default return value for functions that do not explicitly return anything

5. Dictionaries
- collection of key-value pairs
- each key is associated with a value
- my_dict['name'] --> name is the key and value respective of name is accessed using this method
- my_dict['email'] = 'john@example.com' --> new key value pair can be added 
- del my_dict['gender'] --> del keyword to delete key value pair
- nested dictionaries
- Properties of dictionary keys -  
    - unique (If you try to assign a value to a key that already exists in the dictionary, the new value will overwrite the existing value)
    - Immutable - Dictionary keys must be immutable, Mutable data types like lists cannot be used as dictionary keys
    - Hashable - Since dictionaries are implemented using a hash table, keys must be hashable. This means that the hash value of a key must remain constant throughout the lifetime of the dictionary. Immutable data types like strings and numbers are hashable, while mutable data types like lists and dictionaries are not
    - dictionary keys are case-sensitive

- dictionary methods - clear, copy, fromkeys, get, items, keys, pop, popitem, update, values

6. Tuples
- collection of ordered and immutable elements
- enclosed in parentheses
- tuple with a single element is that you must include a comma after the element
- indexing can be used to access tuple
- slicing can also be used to extract a subset of its elements
- can concatenate tuples using the + operator, which creates a new tuple containing the elements of both tuples
- tuple unpacking 
- commonly used for returning multiple values from a function, as they can be unpacked to separate variables
- used to create a collection of elements that should not be modified
- to represent an ordered collection of items where the order should not be changed

- Tuple methods - count, index

7. Sets
- an unordered collection of unique elements
- useful when you need to perform operations such as intersection, union, and difference on collections of data
- test using membership operator
    my_set = {1, 2, 3}
    print(2 in my_set) 	# Output: True
    print(4 in my_set) 	# Output: False

- set methods - add, clear, copy, difference, difference_update, discard, intersection, intersection_update, isdisjoint, issubset, issuperset, pop, remove, symmetric_difference, symmetric_difference_update, union, update
- difference between discard() and remove() methods --> remove raises key error if element to remove is not found.

- Python keywords - and, as, assert, break, class, continue, def, del, elif, else, except, False, finally, for, from, global, if, import, in, is, lambda, None, nonlocal, not, or, pass, raise, return, True, try, while, with, yield

- escape sequences - \n, \t, \', \", \\, 

Operators
1. Arithmetic - addition, subtraction, multiplication, division, modulo, floor division, exponentiation
- Operator Precedence - the order in which operations are evaluated in an expression

2. Assignment - addition and assignment, subtraction and assignment, multiplication and assignment, division and assignment, modulo and assignment

3. Comparison - equal to, not equal to, greater than, less than, greater than equal to, less than equal to

4. Logical operators - AND, OR, NOT

- walrus operator (assignment expressions)
    - walrus operator has some limitations and considerations
        - The walrus operator can only be used within an expression, not as a standalone statement
        - The scope of the assigned variable is limited to the current block or expression where the walrus operator is used
        - It's important to use the walrus operator judiciously to maintain code readability. Overuse or excessive nesting can lead to code that is harder to understand
    - The walrus operator provides a concise and expressive way to assign values within expressions, reducing the need for separate assignment statements and improving code readability in certain situations

in keyword - 
membership operator

Expression vs Statement -  
Expression - piece of code that produces a value
Statement - complete unit of execution that performs an action
Statement (cannot be part of an expression) <= Expression (Can be part of a statement or stand alone)


Type conversion 
int()
float()
string()
list()
tuple([])
set()
bool()

must know functions - 
1. print()
2. type(variable)
3. len() --> [len() vs .count()]
4. sorted() --> [sorted() vs .sort()]
5. range() --> [range(start, stop, step)]
6. help()

Builtin modules
1. random - radint, radrange (methods)
2. Math - abs, round, pow, sqrt, floor, ceil, min, max, sum, log

Conditional Logic - 
- if - elif - else
- nested if statements

- ternary operator 
    - 

Loops - 
- loop is used to iterate over a sequence of elements
- for loop - iterating over sequences, iterate over the keys or values in a dictionary using the items() method
- while loop - while - else

- break, continue, pass

Iterables -
- iterable is any object that can be looped over using a for loop
- object that has an __iter__() method that returns an iterator object
- object that has a __next__() method that returns the next item in the sequence, and raises a StopIteration exception when there are no more items to return
- Builtin - lists, tuples, dictionaries, sets, strings
- Builtin - 
    - range()
        - range(start, stop, step) 
    - enumerate() 
        - contains pairs of the form (index, value) for each item in the iterable
        - useful when you want to keep track of the index of each item in an iterable object
        - can save you from writing a separate counter variable and incrementing it manually
        - enumerate(iterable, start=0)
        
- can also create your own iterable objects by defining a class with an __iter__() method that returns an iterator object

functions - 
- block of reusable code that performs a specific task
- allow you to break your program down into smaller, more manageable pieces, making your code easier to read, write, and maintain
- optional and required arguments
- can return multiple values
- conventions - 
    - Should do one thing really well
    - And function should return something
- arguments vs parameters 
    - Parameters - while defining a function, values that a function expects to receive when it is called.
        - default parameters
    - Arguments -
        - Actual values passed to a function when it is called
        - They correspond to the parameters defined in the function declaration
        - keyword arguments
        - positional arguments
- return keyword
- nested functions
- methods vs functions
    - function 
        - block of code that is designed to perform a specific task
        - standalone blocks of code
        - called by their name 
        - can only access their own arguments and local variables
    - method 
        - a function that is associated with an object
        - methods are functions that are defined within a class 
        - called on an object using the dot notation 
        - can access and manipulate the object's data
- docstrings (Documentation Strings)
    - a string literal used to provide documentation and descriptions for modules, classes, functions, and methods
    - serves as a way to document the purpose, behavior, parameters, and return values of a piece of code
    - ''' or """
    - placed immediately after the definition of a module, class, function, or method
    - docstrings can be automatically extracted to generate documentation in various formats, such as HTML or PDF, using tools like Sphinx
    - To access a docstring, you can use the `help()` function or access the `__doc__` attribute of an object

- magic methods or dunder methods (double underscore)
- args and kwargs
    - `*args` and `**kwargs` are special syntaxes used in function definitions to handle a varying number of arguments
    - You can use both `*args` and `**kwargs` together in a function definition if you want to accept both positional and keyword arguments
    - Rule of arguments - actual params, *args, default parameters, **kwargs
    - args
        - used to pass a variable number of non-keyword arguments to a function
        - The `*args` parameter allows you to pass multiple positional arguments, which are then captured as a tuple inside the function
        - The name `args` is arbitrary and can be replaced with any valid variable name, but the asterisk (`*`) is necessary to indicate that it is a special parameter
        - Inside the function, we can iterate over `args` and print each argument
    - kwargs 
        - `**kwargs` is used to pass a variable number of keyword arguments to a function
        - The `**kwargs` parameter allows you to pass multiple keyword arguments, which are then captured as a dictionary inside the function
        - Similar to `*args`, the name `kwargs` is arbitrary, but the double asterisks (`**`) are necessary to indicate that it is a special parameter
        - Inside the function, we can iterate over `kwargs` using the `items()` method and print each key-value pair

    

Python Indentation 

Truthy vs Falsey 

Ternary operator 
- syntax 
(output) if (condition is True) else (output - if condition is false)

Misc - 
- Why print('a'>'A') evaluates to True 
    - performed based on their lexicographic order
    - Since 'a' comes after 'A' in the ASCII table

- What will be the output of print(1<2>3<4<5) in python and why?
    - False
    - comparison operators in Python, such as < and >, have left-to-right associativity
    - the expression is evaluated from left to right, and the comparison operations are evaluated in pairs

- is vs ==
    - == operator is used to compare the values of two objects - checks whether the two objects have the same value or not
    - 'is' operator is used to compare the identity of two objects - checks whether the two objects refer to the same memory location or not

clean coding 
DRY principle

Scope
    - scoping defines the visibility and accessibility of variables and names within a program
    - The scope rules in Python follow the LEGB rule
    - Local , Enclosing, Global , Built-in
    - scoping is important because -
        - Avoiding Naming Conflicts
        - Encapsulation and Modularity
        - Code Reusability
        - Variable Lifetime
    - nonlocal keyword

Dependency injection